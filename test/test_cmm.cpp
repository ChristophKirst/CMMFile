/***********************************************************************
   test_cmm.cpp    -  testing the Mathematica - Matlab - Cpp 
                      binary file interface

   Christoph Kirst
   christoph@nld.ds.mpg.de 
   Max Planck Institue for Dynamics and Self-Organisation
************************************************************************/


//#include <stdio.h>
#include <iostream>
#include "cmmfile.h"

using namespace std;


int main(int argc, char* argv[])
{
   cout << "sizes:" << endl;
   cout << "char   = " << sizeof(char) <<endl;
   cout << "double = " << sizeof(double) << endl;
   cout << "long   = " << sizeof(long) <<endl;
   cout << "ulong  = " << sizeof(unsigned long) <<endl;
   cout << "int    = " << sizeof(int) <<endl;
   cout << "uint   = " << sizeof(unsigned int) <<endl;

   cout << "creating and writing cmm" << endl;

   CMMFile cmm;
   cmm.open_write("test_cpp.dat");

   double f = 100.5;
   string s = "hello";
   int a[] = {5,2,3,4,5};
   vector<int> v(a, a + 5);

   cmm << f << s << v;

   vector<vector<double> > vv;
   vv.resize(4);
   for (vector<vector<double> >::iterator it = vv.begin(); it != vv.end(); it++) {
      (*it).resize(5);
      for (vector<double>::iterator iit = it->begin(); iit != it->end(); iit++) {
         (*iit) = 101.0;
      }
   }
   vv[1][2] = 200.0;

   cmm << vv;

   cmm.close();

   cout << "done writing" << endl;

   cmm.open_read("test_cpp.dat");

   double ff;
   cmm >> ff;
   cout << f << " == " << ff << endl;
   string ss;
   cmm >> ss;
   cout << s << " == " << ss << endl;

   vector<int> in;
   cmm >> in;

   cout << "vector:" << endl;
   vector<int>::iterator itv = v.begin();
   for (vector<int>::iterator it = in.begin(); it != in.end(); it++)
   {
      cout << (*itv) << " == " << (*it) << endl;
      itv++;
   }


   cout << "matrix:"<< endl;
   for (vector<vector<double> >::iterator it = vv.begin(); it != vv.end(); it++) {
      for (vector<double>::iterator iit = it->begin(); iit != it->end(); iit++) {
         cout << (*iit) << " ,";
      }
      cout << endl;
   }

   vv.clear();
   cmm >> vv;

   for (vector<vector<double> >::iterator it = vv.begin(); it != vv.end(); it++) {
      for (vector<double>::iterator iit = it->begin(); iit != it->end(); iit++) {
         cout << (*iit) << " ,";
      }
      cout << endl;
   }

   cmm.close();

   cout << "done reading test_cpp.dat" << endl;
 
   //continuous file streams
   
   cmm.open_write("test2_cpp.dat");
   
   cmm.write_header<double>(-1);
   cmm.write_data(0.5);
   cmm.write_data(0.599); 
   cmm.close();
   
   cmm.open_read("test2_cpp.dat");
   
   vector<double> din;
   cmm >> din;
   for (vector<double>::iterator it = din.begin(); it != din.end(); it++)
   {
      cout << (*it) << ", ";
   }
   cout << endl;
   
   cmm.close();
   
   cout << "done reading test2_cpp.dat" << endl;
   
   // list of strings

   cmm.open_write("test3_cpp.dat");
   
   vector<string> vs;
   vs.resize(3);
   for (vector<string>::iterator it = vs.begin(); it != vs.end(); it++)
   {
      (*it) = "test";
   }
   vs[1] = "josen";
   
   cmm << vs;
   
   cmm.close();
   
   cmm.open_read("test3_cpp.dat");
   vs.clear();
   cmm >> vs;
   for (vector<string>::iterator it = vs.begin(); it != vs.end(); it++)
   {
      cout << (*it) <<endl;
   }
   
   cmm.close();
   
   cout << "done reading test3_cpp.dat" << endl;
   

   // files generated by mathematica CMMFile.m package

   cmm.open_read("test_math.dat");
   cmm >> in;
   
   for (vector<int>::iterator it = in.begin(); it != in.end(); it++)
   {
      cout << (*it) << ", ";
   }
   cout << endl;
   
   string str;
   cmm >> str;
   cout << str << endl;
   
   cmm >> vv;
   for (vector<vector<double> >::iterator it = vv.begin(); it != vv.end(); it++) {
      for (vector<double>::iterator iit = it->begin(); iit != it->end(); iit++) {
         cout << (*iit) << " ,";
      }
      cout << endl;
   }
   
   cout << "done reading test_math.dat" << endl;
   
   cmm.close();
   
   // files generated by matlab cmm_write.m

   cmm.open_read("test_mat.dat");
   
   cmm >> in;
   for (vector<int>::iterator it = in.begin(); it != in.end(); it++)
   {
      cout << (*it) << ", ";
   }
   cout << endl;

   cmm >> str;
   cout << str << endl;
   
   cmm >> vv;
   for (vector<vector<double> >::iterator it = vv.begin(); it != vv.end(); it++) {
      for (vector<double>::iterator iit = it->begin(); iit != it->end(); iit++) {
         cout << (*iit) << " ,";
      }
      cout << endl;
   }


   vector< vector< string> > vvs;
   cmm >> vvs;
   for (vector<vector<string> >::iterator it = vvs.begin(); it != vvs.end(); it++) {
      for (vector<string>::iterator iit = it->begin(); iit != it->end(); iit++) {
         cout << (*iit) << " ,";
      }
      cout << endl;
   }

   cmm.close();

// sequence stuff
   cmm.open_write("test_cpp_sequence.dat");

   cmm << 10.6;
   bool xx = true;
   cmm << xx;
   cmm.write_start_sequence();
   cmm.write_header_sequence<double>();
   cmm.write_header_sequence<int>(-1);
   cmm.write_end_sequence();
   
   std::vector<int> vi;
   for (int i = 0; i < 6; i++) {
      cmm.write_data_sequence(0.1 * i + 10);
      vi.clear();
      for (int j = 0; j<i; j++) {
         vi.push_back(i * j+ 2);
      }
      cmm.write_data_sequence(vi);
   }
   
   cmm.close();
   
   cmm.open_read("test_cpp_sequence.dat");
   
   double dd;
   cmm >> dd >> xx;
   cout << dd << " == " << 10.6 << endl;
   cout << xx << endl;
   
   vector<double> vd;
   vector< vector<int> > vvi;
   
   cout << "reading sequence " << endl;
   
   cmm.read_sequence(vd, vvi);
   
   cout << "data of 1st sequence entry:"<< endl;
   for (int i = 0; i < vd.size(); i++) {
      cout << vd[i] << ", ";
   }
   cout << endl;
   
   cout << "data of 2nd sequence entry:"<< endl;
   for (int i = 0; i < vvi.size(); i++) {
      for (int j=0; j< vvi[i].size(); j++) {
         cout << vvi[i][j] << ", ";
      }
      cout << endl;
   }
   cout << endl;
   
   cmm.close();
   
   
   
   cout << "reading data sequence generated with mathematica: " << endl;
   
   cmm.open_read("test_math_sequence.dat");
   
   //vector<double> vd;
   //vector< vector<int> > vvi;
   
   cout << "reading sequence " << endl;
   
   cmm.read_sequence(vd, vvi);
   
   cout << "data of 1st sequence entry:"<< endl;
   for (int i = 0; i < vd.size(); i++) {
      cout << vd[i] << ", ";
   }
   cout << endl;
   
   cout << "data of 2nd sequence entry:"<< endl;
   for (int i = 0; i < vvi.size(); i++) {
      for (int j=0; j< vvi[i].size(); j++) {
         cout << vvi[i][j] << ", ";
      }
      cout << endl;
   }
   cout << endl;
   
   cmm.close();
   
}
